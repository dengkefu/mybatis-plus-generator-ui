package ${package.Controller};

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.biitt.common.api.vo.Result;
import com.biitt.common.system.query.QueryGenerator;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;
import lombok.extern.slf4j.Slf4j;
import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;
<% if(!restControllerStyle){ %>
import org.springframework.stereotype.Controller;
<% } %>
<% if(isNotEmpty(superControllerClassPackage)){ %>
import ${superControllerClassPackage};
<% } %>
<% if(isNotEmpty(controllerMethods.list)){  %>
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.metadata.IPage;
<% } %>
<% if(isNotEmpty(controllerMethods.hasMethod)){  %>
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${table.entityName};
<% } %>

/**
 * ${table.comment!} 接口控制器
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Api(tags = "${table.comment!}")
<% if(restControllerStyle){ %>
@RestController
<% }else{ %>
@Controller
<% } %>
@RequestMapping("<% if(isNotEmpty(package.ModuleName)){ %>/${package.ModuleName}<% } %>/<% if(isNotEmpty(controllerMappingHyphenStyle)){ %>${controllerMappingHyphen}<% }else{ %>${table.entityPath}<% } %>")
<% if(kotlin){ %>
class ${table.controllerName}<% if(isNotEmpty(superControllerClass)){ %> : ${superControllerClass}()<% } %>
<% }else{ %>
    <% if(isNotEmpty(superControllerClass)){ %>
public class ${table.controllerName} extends ${superControllerClass} {
    <% }else{ %>
public class ${table.controllerName} {
    <% } %>

    <%
       var serviceInstanceName = @cn.hutool.core.util.StrUtil.lowerFirst(table.serviceName);
    %>

    <% if(isNotEmpty(controllerMethods.hasMethod)){  %>
    @Resource
    private ${table.serviceName} ${serviceInstanceName};
    <% } %>

    <% if(isNotEmpty(controllerMethods.list)){  %>
    @ApiOperation(value = "${table.comment!} - 分页列表查询", notes = "${table.comment!} - 分页列表查询")
    @RequestMapping(value = "/list", method = {RequestMethod.GET})
    public Result<IPage<${table.entityName}>> queryPageList(${table.entityName} ${table.entityPath},
                                                    @RequestParam(name = "pageNo", defaultValue = "1") Integer pageNo,
                                                    @RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize,
                                                    HttpServletRequest req) {
        QueryWrapper<${table.entityName}> queryWrapper = QueryGenerator.initQueryWrapper(${table.entityPath}, req.getParameterMap());
        Page<${table.entityName}> page = new Page<${table.entityName}>(pageNo, pageSize);
        queryWrapper.orderByDesc("create_time");
        IPage<${table.entityName}> pageList = ${serviceInstanceName}.page(page, queryWrapper);
        return Result.OK(pageList);
    }
    <% } %>

    <% if(isNotEmpty(controllerMethods.getById)){ %>
    @ApiOperation(value = "${table.comment!} - 通过id查询", notes = "${table.comment!} - 通过id查询")
    @RequestMapping(value = "/queryById", method = {RequestMethod.GET})
    public Result<${table.entityName}> queryById(@RequestParam(name = "id", required = true) String id) {
        return Result.OK(${serviceInstanceName}.getById(id));
    }
    <% } %>

    <% if(isNotEmpty(controllerMethods.create)){ %>
    @ApiOperation(value = "${table.comment!} - 添加", notes = "${table.comment!} - 添加")
    @RequestMapping(value = "/add", method = {RequestMethod.POST})
    public Result<String> add(@RequestBody ${table.entityName} ${table.entityPath}) {
        ${serviceInstanceName}.save(${table.entityPath});
        return Result.OK("添加成功");
    }
    <% } %>

    <% if(isNotEmpty(controllerMethods.delete)){ %>
    @ApiOperation(value = "${table.comment!} - 通过id删除", notes = "${table.comment!} - 通过id删除")
    @RequestMapping(value = "/delete", method = {RequestMethod.POST})
    public Result<String> delete(@RequestParam("id") String id) {
        ${serviceInstanceName}.removeById(id);
        return Result.OK("删除成功!");
    }

    @ApiOperation(value = "${table.comment!} - 批量删除", notes = "${table.comment!} - 批量删除")
    @RequestMapping(value = "/deleteBatch", method = {RequestMethod.POST})
    public Result<String> deleteBatch(@RequestParam("ids") String ids) {
        ${serviceInstanceName}.removeByIds(Arrays.asList(ids.split(",")));
        return Result.OK("批量删除成功!");
    }
    <% } %>

    <% if(isNotEmpty(controllerMethods.update)){ %>
    @ApiOperation(value = "${table.comment!} - 编辑", notes = "${table.comment!} - 编辑")
    @RequestMapping(value = "/edit", method = {RequestMethod.POST})
    public Result<String> edit(@RequestBody ${table.entityName} ${table.entityPath}) {
        ${serviceInstanceName}.updateById(${table.entityPath});
        return Result.OK("修改成功");
    }
    <% } %>
}
<% } %>
